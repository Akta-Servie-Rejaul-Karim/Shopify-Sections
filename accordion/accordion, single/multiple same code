/**
 * Custom Web Component: <my-accordion>
 *
 * Features:
 * - Supports multiple or single open mode.
 * - Smooth CSS max-height transition.
 * - Toggles "active" class on items.
 * - Configurable via attribute <my-accordion single>
 * - Can also be controlled from JS: accordion.single = true/false
 *
 * Usage in HTML:
 * <my-accordion single>
 *   <div class="accordion-item">
 *     <div class="accordion-header">Title 1</div>
 *     <div class="accordion-content">Content 1</div>
 *   </div>
 *   <div class="accordion-item">
 *     <div class="accordion-header">Title 2</div>
 *     <div class="accordion-content">Content 2</div>
 *   </div>
 * </my-accordion>
 */
class MyAccordion extends HTMLElement {
  connectedCallback() {
    this.items = this.querySelectorAll(".accordion-item");

    this.items.forEach((item) => {
      const header = item.querySelector(".accordion-header");
      const content = item.querySelector(".accordion-content");

      if (!header || !content) return;

      // Initialize styles for smooth animation
      content.style.overflow = "hidden";
      content.style.transition = "max-height 0.3s ease";
      content.style.maxHeight = "0px";

      header.addEventListener("click", () => this.toggleItem(item, content));
    });
  }

  toggleItem(item, content) {
    const isActive = item.classList.contains("active");

    if (this.single) {
      // Close all items first
      this.items.forEach((other) => {
        const otherContent = other.querySelector(".accordion-content");
        other.classList.remove("active");
        if (otherContent) otherContent.style.maxHeight = "0px";
      });
    }

    // Open or toggle closed depending on mode
    if (!isActive) {
      item.classList.add("active");
      content.style.maxHeight = content.scrollHeight + "px";
    } else if (!this.single) {
      // Only allow closing in multi mode
      item.classList.remove("active");
      content.style.maxHeight = "0px";
    }
  }

  // Expose single mode as property + attribute
  get single() {
    return this.hasAttribute("single") || this._single;
  }
  set single(value) {
    if (value) {
      this._single = true;
      this.setAttribute("single", "");
    } else {
      this._single = false;
      this.removeAttribute("single");
    }
  }
}

// Register component once
if (!customElements.get("my-accordion")) {
  customElements.define("my-accordion", MyAccordion);
}
